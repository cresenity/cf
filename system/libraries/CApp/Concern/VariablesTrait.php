<?php

/**
 * Description of Variables.
 *
 * @author Hery
 *
 * @see CApp
 */
trait CApp_Concern_VariablesTrait {
    /**
     * @var array
     */
    protected static $variables;

    /**
     * Return all variables generated by CApp for used in js var capp.
     *
     * @return array
     */
    public static function variables() {
        /** @var CApp $this */
        $variables = [];
        $variables['decimal_separator'] = $variables['decimalSeparator'] = static::formatter()->getDecimalSeparator();
        $variables['thousand_separator'] = $variables['thousandSeparator'] = static::formatter()->getThousandSeparator();
        $variables['decimal_digit'] = $variables['decimalDigit'] = static::formatter()->getDecimalDigit();

        $variables['format'] = [];
        $variables['format']['decimalSeparator'] = static::formatter()->getDecimalSeparator();
        $variables['format']['thousandSeparator'] = static::formatter()->getThousandSeparator();
        $variables['format']['decimalDigit'] = static::formatter()->getDecimalDigit();
        $variables['format']['date'] = static::formatter()->getDatetimeFormat();
        $variables['format']['datetime'] = static::formatter()->getDateFormat();
        $variables['have_clock'] = ccfg::get('have_clock') === null ? false : ccfg::get('have_clock');
        $variables['haveClock'] = ccfg::get('have_clock') === null ? false : ccfg::get('have_clock');
        $variables['have_scroll_to_top'] = $variables['haveScrollToTop'] = CF::config('cresjs', 'scroll_to_top');
        $variables['CFVersion'] = CF::version();
        $variables['domain'] = CF::domain();
        $variables['appCode'] = CF::appCode();
        $variables['appId'] = CF::appId();
        $variables['debug'] = CF::isDevSuite();
        $variables['environment'] = CF::environment();

        $variables['vscode'] = [];
        $variables['vscode']['liveReload'] = CF::config('cresjs.vscode.live_reload');
        $variables['react'] = [];
        $variables['react']['enable'] = CF::config('cresjs.react.enable');
        $variables['block'] = [];
        $variables['block']['html'] = CF::config('cresjs.block.html');
        $variables['waves'] = [];
        $variables['waves']['selector'] = CF::config('cresjs.waves.selector');
        $bootstrap = ccfg::get('bootstrap');
        $themeData = CManager::instance()->getThemeData();
        if (isset($themeData) && strlen(carr::get($themeData, 'bootstrap')) > 0) {
            $bootstrap = carr::get($themeData, 'bootstrap');
        }

        if (strlen($bootstrap) == 0) {
            $bootstrap = '2.3';
        }
        $variables['bootstrap'] = $bootstrap;

        $variables['base_url'] = curl::base();
        $variables['baseUrl'] = curl::base();
        $variables['label_confirm'] = c::__('Are you sure ?');
        $variables['labelConfirm'] = c::__('Are you sure ?');
        $variables['label_ok'] = c::__('OK');
        $variables['labelOk'] = c::__('OK');
        $variables['label_cancel'] = c::__('Cancel');
        $variables['labelCancel'] = c::__('Cancel');
        $variables['isAuthEnabled'] = c::app()->isAuthEnabled();

        $asset = CManager::asset();
        $variables['requireJs'] = false;

        //we collect all client modules data
        $allModules = CManager::asset()->module()->allModules();
        $variables['modules'] = $allModules;
        $variables['theme'] = [];
        $variables['theme']['name'] = CManager::theme()->getCurrentTheme();
        $variables['theme']['data'] = CManager::theme()->getThemeData();

        $variables['jsUrl'] = CManager::asset()->getAllJsFileUrl();
        $variables['cssUrl'] = CManager::asset()->getAllCssFileUrl();

        $variables['defaultJQueryUrl'] = curl::base() . 'media/js/libs/jquery-3.3.1/jquery-3.3.1.min.js';
        if (is_array(static::$variables)) {
            $variables = array_merge($variables, static::$variables);
        }

        return $variables;
    }

    /**
     * Alias of variables.
     *
     * @return array
     *
     * @see CApp_Trait_App_Variables::variables()
     */
    public static function getVariables() {
        return static::variables();
    }

    /**
     * @param string $key
     * @param mixed  $value
     *
     * @return void
     */
    public static function setVariable($key, $value) {
        if (static::$variables == null) {
            static::$variables = [];
        }
        static::$variables[$key] = $value;
    }
}
